; ModuleID = 'Decaf compiler'
source_filename = "Decaf compiler"

@array = global [10 x i32] zeroinitializer
@tempArray = global [10 x i32] zeroinitializer
@0 = private unnamed_addr constant [16 x i8] c"sorted array : \00"
@1 = private unnamed_addr constant [4 x i8] c"%d \00"
@2 = private unnamed_addr constant [2 x i8] c"\0A\00"

define void @merge(i32 %s1, i32 %s2, i32 %e1, i32 %e2) {
entry:
  %k45 = alloca i32
  %newIt33 = alloca i32
  %newIt19 = alloca i32
  %i = alloca i32
  %loopI = alloca i32
  %newIt = alloca i32
  %it = alloca i32
  %curlen = alloca i32
  %k = alloca i32
  %j = alloca i32
  %e24 = alloca i32
  %e13 = alloca i32
  %s22 = alloca i32
  %s11 = alloca i32
  store i32 %s1, i32* %s11
  store i32 %s2, i32* %s22
  store i32 %e1, i32* %e13
  store i32 %e2, i32* %e24
  store i32 0, i32* %j
  store i32 0, i32* %k
  store i32 0, i32* %curlen
  store i32 0, i32* %it
  store i32 0, i32* %newIt
  store i32 0, i32* %loopI
  %0 = load i32, i32* %s22
  %1 = load i32, i32* %j
  store i32 %0, i32* %j
  %2 = load i32, i32* %k
  store i32 0, i32* %k
  %3 = load i32, i32* %e24
  %4 = load i32, i32* %s11
  %subtmp = sub i32 %3, %4
  %addtmp = add i32 %subtmp, 1
  %5 = load i32, i32* %curlen
  store i32 %addtmp, i32* %curlen
  %6 = load i32, i32* %s11
  %7 = load i32, i32* %it
  store i32 %6, i32* %it
  %8 = load i32, i32* %loopI
  store i32 11, i32* %loopI
  %9 = load i32, i32* %s11
  store i32 %9, i32* %i
  br label %loop

loop:                                             ; preds = %ifcont16, %entry
  %i5 = phi i32 [ %9, %entry ], [ %NextVal, %ifcont16 ]
  %10 = load i32, i32* %e13
  %addtmp6 = add i32 %10, 1
  %11 = load i32, i32* %j
  %12 = load i32, i32* %e24
  %gtcomparetmp = icmp sgt i32 %11, %12
  br i1 %gtcomparetmp, label %if, label %ifcont

afterloop:                                        ; preds = %ifcont16, %if
  %13 = load i32, i32* %loopI
  %14 = load i32, i32* %e13
  %lecomparetmp = icmp sle i32 %13, %14
  br i1 %lecomparetmp, label %if18, label %ifcont30

if:                                               ; preds = %loop
  %15 = load i32, i32* %i
  %16 = load i32, i32* %loopI
  store i32 %15, i32* %loopI
  br label %afterloop

ifcont:                                           ; preds = %loop
  %17 = load i32, i32* %i
  %array_Index = getelementptr [10 x i32], [10 x i32]* @array, i32 0, i32 %17
  %18 = load i32, i32* %j
  %array_Index7 = getelementptr [10 x i32], [10 x i32]* @array, i32 0, i32 %18
  %19 = load i32, i32* %array_Index
  %20 = load i32, i32* %array_Index7
  %ltcomparetmp = icmp slt i32 %19, %20
  br i1 %ltcomparetmp, label %if8, label %else

if8:                                              ; preds = %ifcont
  %21 = load i32, i32* %i
  %array_Index9 = getelementptr [10 x i32], [10 x i32]* @array, i32 0, i32 %21
  %22 = load i32, i32* %array_Index9
  %23 = load i32, i32* %k
  %tempArray_Index = getelementptr [10 x i32], [10 x i32]* @tempArray, i32 0, i32 %23
  %24 = load i32, i32* %tempArray_Index
  store i32 %22, i32* %tempArray_Index
  %25 = load i32, i32* %k
  %addtmp10 = add i32 %25, 1
  %26 = load i32, i32* %k
  store i32 %addtmp10, i32* %k
  br label %ifcont16

else:                                             ; preds = %ifcont
  %27 = load i32, i32* %j
  %array_Index11 = getelementptr [10 x i32], [10 x i32]* @array, i32 0, i32 %27
  %28 = load i32, i32* %array_Index11
  %29 = load i32, i32* %k
  %tempArray_Index12 = getelementptr [10 x i32], [10 x i32]* @tempArray, i32 0, i32 %29
  %30 = load i32, i32* %tempArray_Index12
  store i32 %28, i32* %tempArray_Index12
  %31 = load i32, i32* %k
  %addtmp13 = add i32 %31, 1
  %32 = load i32, i32* %k
  store i32 %addtmp13, i32* %k
  %33 = load i32, i32* %j
  %addtmp14 = add i32 %33, 1
  %34 = load i32, i32* %j
  store i32 %addtmp14, i32* %j
  %35 = load i32, i32* %i
  %subtmp15 = sub i32 %35, 1
  %36 = load i32, i32* %i
  store i32 %subtmp15, i32* %i
  br label %ifcont16

ifcont16:                                         ; preds = %else, %if8
  %i17 = load i32, i32* %i
  %NextVal = add i32 %i17, 1
  store i32 %NextVal, i32* %i
  %loopcondition = icmp slt i32 %NextVal, %addtmp6
  br i1 %loopcondition, label %loop, label %afterloop

if18:                                             ; preds = %afterloop
  %37 = load i32, i32* %loopI
  store i32 %37, i32* %newIt19
  br label %loop20

loop20:                                           ; preds = %loop20, %if18
  %newIt22 = phi i32 [ %37, %if18 ], [ %NextVal28, %loop20 ]
  %38 = load i32, i32* %e13
  %addtmp23 = add i32 %38, 1
  %39 = load i32, i32* %newIt19
  %array_Index24 = getelementptr [10 x i32], [10 x i32]* @array, i32 0, i32 %39
  %40 = load i32, i32* %array_Index24
  %41 = load i32, i32* %k
  %tempArray_Index25 = getelementptr [10 x i32], [10 x i32]* @tempArray, i32 0, i32 %41
  %42 = load i32, i32* %tempArray_Index25
  store i32 %40, i32* %tempArray_Index25
  %43 = load i32, i32* %k
  %addtmp26 = add i32 %43, 1
  %44 = load i32, i32* %k
  store i32 %addtmp26, i32* %k
  %newIt27 = load i32, i32* %newIt19
  %NextVal28 = add i32 %newIt27, 1
  store i32 %NextVal28, i32* %newIt19
  %loopcondition29 = icmp slt i32 %NextVal28, %addtmp23
  br i1 %loopcondition29, label %loop20, label %afterloop21

afterloop21:                                      ; preds = %loop20
  br label %ifcont30

ifcont30:                                         ; preds = %afterloop21, %afterloop
  %45 = load i32, i32* %j
  %46 = load i32, i32* %e24
  %lecomparetmp31 = icmp sle i32 %45, %46
  br i1 %lecomparetmp31, label %if32, label %ifcont44

if32:                                             ; preds = %ifcont30
  %47 = load i32, i32* %j
  store i32 %47, i32* %newIt33
  br label %loop34

loop34:                                           ; preds = %loop34, %if32
  %newIt36 = phi i32 [ %47, %if32 ], [ %NextVal42, %loop34 ]
  %48 = load i32, i32* %e24
  %addtmp37 = add i32 %48, 1
  %49 = load i32, i32* %newIt33
  %array_Index38 = getelementptr [10 x i32], [10 x i32]* @array, i32 0, i32 %49
  %50 = load i32, i32* %array_Index38
  %51 = load i32, i32* %k
  %tempArray_Index39 = getelementptr [10 x i32], [10 x i32]* @tempArray, i32 0, i32 %51
  %52 = load i32, i32* %tempArray_Index39
  store i32 %50, i32* %tempArray_Index39
  %53 = load i32, i32* %k
  %addtmp40 = add i32 %53, 1
  %54 = load i32, i32* %k
  store i32 %addtmp40, i32* %k
  %newIt41 = load i32, i32* %newIt33
  %NextVal42 = add i32 %newIt41, 1
  store i32 %NextVal42, i32* %newIt33
  %loopcondition43 = icmp slt i32 %NextVal42, %addtmp37
  br i1 %loopcondition43, label %loop34, label %afterloop35

afterloop35:                                      ; preds = %loop34
  br label %ifcont44

ifcont44:                                         ; preds = %afterloop35, %ifcont30
  store i32 0, i32* %k45
  br label %loop46

loop46:                                           ; preds = %loop46, %ifcont44
  %k48 = phi i32 [ 0, %ifcont44 ], [ %NextVal53, %loop46 ]
  %55 = load i32, i32* %curlen
  %56 = load i32, i32* %k45
  %tempArray_Index49 = getelementptr [10 x i32], [10 x i32]* @tempArray, i32 0, i32 %56
  %57 = load i32, i32* %tempArray_Index49
  %58 = load i32, i32* %it
  %array_Index50 = getelementptr [10 x i32], [10 x i32]* @array, i32 0, i32 %58
  %59 = load i32, i32* %array_Index50
  store i32 %57, i32* %array_Index50
  %60 = load i32, i32* %it
  %addtmp51 = add i32 %60, 1
  %61 = load i32, i32* %it
  store i32 %addtmp51, i32* %it
  %k52 = load i32, i32* %k45
  %NextVal53 = add i32 %k52, 1
  store i32 %NextVal53, i32* %k45
  %loopcondition54 = icmp slt i32 %NextVal53, %55
  br i1 %loopcondition54, label %loop46, label %afterloop47

afterloop47:                                      ; preds = %loop46
  ret void
}

define void @mergesort(i32 %start, i32 %end) {
entry:
  %mid = alloca i32
  %end2 = alloca i32
  %start1 = alloca i32
  store i32 %start, i32* %start1
  store i32 %end, i32* %end2
  %0 = load i32, i32* %start1
  %1 = load i32, i32* %end2
  %ltcomparetmp = icmp slt i32 %0, %1
  br i1 %ltcomparetmp, label %if, label %ifcont

if:                                               ; preds = %entry
  store i32 0, i32* %mid
  %2 = load i32, i32* %end2
  %3 = load i32, i32* %start1
  %subtmp = sub i32 %2, %3
  %divtmp = sdiv i32 %subtmp, 2
  %4 = load i32, i32* %start1
  %addtmp = add i32 %4, %divtmp
  %5 = load i32, i32* %mid
  store i32 %addtmp, i32* %mid
  %6 = load i32, i32* %start1
  %7 = load i32, i32* %mid
  call void @mergesort(i32 %6, i32 %7)
  %8 = load i32, i32* %mid
  %addtmp3 = add i32 %8, 1
  %9 = load i32, i32* %end2
  call void @mergesort(i32 %addtmp3, i32 %9)
  %10 = load i32, i32* %start1
  %11 = load i32, i32* %mid
  %addtmp4 = add i32 %11, 1
  %12 = load i32, i32* %mid
  %13 = load i32, i32* %end2
  call void @merge(i32 %10, i32 %addtmp4, i32 %12, i32 %13)
  br label %ifcont

ifcont:                                           ; preds = %if, %entry
  ret void
}

define void @main() {
entry:
  %i3 = alloca i32
  %i = alloca i32
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i1 = phi i32 [ 0, %entry ], [ %NextVal, %loop ]
  %0 = load i32, i32* %i
  %subtmp = sub i32 10, %0
  %1 = load i32, i32* %i
  %array_Index = getelementptr [10 x i32], [10 x i32]* @array, i32 0, i32 %1
  %2 = load i32, i32* %array_Index
  store i32 %subtmp, i32* %array_Index
  %i2 = load i32, i32* %i
  %NextVal = add i32 %i2, 1
  store i32 %NextVal, i32* %i
  %loopcondition = icmp slt i32 %NextVal, 10
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  call void @mergesort(i32 0, i32 9)
  %3 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i32 0, i32 0))
  store i32 0, i32* %i3
  br label %loop4

loop4:                                            ; preds = %loop4, %afterloop
  %i6 = phi i32 [ 0, %afterloop ], [ %NextVal9, %loop4 ]
  %4 = load i32, i32* %i3
  %array_Index7 = getelementptr [10 x i32], [10 x i32]* @array, i32 0, i32 %4
  %5 = load i32, i32* %array_Index7
  %6 = call i32 bitcast (i32 (i8*)* @printf to i32 (i8*, i32)*)(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i32 %5)
  %i8 = load i32, i32* %i3
  %NextVal9 = add i32 %i8, 1
  store i32 %NextVal9, i32* %i3
  %loopcondition10 = icmp slt i32 %NextVal9, 10
  br i1 %loopcondition10, label %loop4, label %afterloop5

afterloop5:                                       ; preds = %loop4
  %7 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*)
