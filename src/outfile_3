; ModuleID = 'Decaf compiler'
source_filename = "Decaf compiler"

@0 = private unnamed_addr constant [11 x i8] c"gcd is %d\0A\00"

define i32 @gcd(i32 %x, i32 %y) {
entry:
  %y2 = alloca i32
  %x1 = alloca i32
  store i32 %x, i32* %x1
  store i32 %y, i32* %y2
  %0 = load i32, i32* %x1
  %1 = load i32, i32* %y2
  %equalcomparetmp = icmp eq i32 %0, %1
  br i1 %equalcomparetmp, label %if, label %else

if:                                               ; preds = %entry
  %2 = load i32, i32* %x1
  ret i32 %2

else:                                             ; preds = %entry
  %3 = load i32, i32* %x1
  %4 = load i32, i32* %y2
  %ltcomparetmp = icmp slt i32 %3, %4
  br i1 %ltcomparetmp, label %if3, label %else4

if3:                                              ; preds = %else
  %5 = load i32, i32* %x1
  %6 = load i32, i32* %y2
  %7 = load i32, i32* %x1
  %subtmp = sub i32 %6, %7
  %8 = call i32 @gcd(i32 %5, i32 %subtmp)
  ret i32 %8

else4:                                            ; preds = %else
  %9 = load i32, i32* %x1
  %10 = load i32, i32* %y2
  %subtmp5 = sub i32 %9, %10
  %11 = load i32, i32* %y2
  %12 = call i32 @gcd(i32 %subtmp5, i32 %11)
  ret i32 %12

ifcont:                                           ; No predecessors!
  ret i32 0

ifcont6:                                          ; No predecessors!
  ret i32 0
}

define void @main() {
entry:
  %a = alloca i32
  store i32 0, i32* %a
  %0 = call i32 @gcd(i32 6, i32 12)
  %1 = load i32, i32* %a
  store i32 %0, i32* %a
  %2 = load i32, i32* %a
  %3 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i32 %2)
  ret void
}

declare i32 @printf(i8*, i32)
