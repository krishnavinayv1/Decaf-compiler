; ModuleID = 'Decaf compiler'
source_filename = "Decaf compiler"

@v1 = global [100 x i32] zeroinitializer
@0 = private unnamed_addr constant [42 x i8] c"Enter the elements in the first vector: \0A\00"
@1 = private unnamed_addr constant [28 x i8] c"Enter the size of vectors: \00"
@2 = private unnamed_addr constant [31 x i8] c"The final sorted order  is : \0A\00"
@3 = private unnamed_addr constant [4 x i8] c"%d \00"
@4 = private unnamed_addr constant [2 x i8] c"\0A\00"

define void @main() {
entry:
  %i27 = alloca i32
  %temp = alloca i32
  %j8 = alloca i32
  %i4 = alloca i32
  %i1 = alloca i32
  %j = alloca i32
  %n = alloca i32
  %i = alloca i32
  store i32 0, i32* %i
  store i32 0, i32* %n
  store i32 0, i32* %j
  %0 = load i32, i32* %n
  store i32 10, i32* %n
  %1 = call i32 @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @0, i32 0, i32 0))
  %2 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @1, i32 0, i32 0))
  store i32 0, i32* %i1
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = phi i32 [ 0, %entry ], [ %NextVal, %loop ]
  %3 = load i32, i32* %n
  %4 = load i32, i32* %i1
  %subtmp = sub i32 10, %4
  %5 = load i32, i32* %i1
  %v1_Index = getelementptr [100 x i32], [100 x i32]* @v1, i32 0, i32 %5
  %6 = load i32, i32* %v1_Index
  store i32 %subtmp, i32* %v1_Index
  %i3 = load i32, i32* %i1
  %NextVal = add i32 %i3, 1
  store i32 %NextVal, i32* %i1
  %loopcondition = icmp slt i32 %NextVal, %3
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  store i32 0, i32* %i4
  br label %loop5

loop5:                                            ; preds = %afterloop10, %afterloop
  %i7 = phi i32 [ 0, %afterloop ], [ %NextVal25, %afterloop10 ]
  %7 = load i32, i32* %n
  store i32 0, i32* %j8
  br label %loop9

afterloop6:                                       ; preds = %afterloop10
  %8 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @2, i32 0, i32 0))
  store i32 0, i32* %i27
  br label %loop28

loop9:                                            ; preds = %ifcont, %loop5
  %j11 = phi i32 [ 0, %loop5 ], [ %NextVal22, %ifcont ]
  %9 = load i32, i32* %n
  %subtmp12 = sub i32 %9, 1
  %10 = load i32, i32* %j8
  %v1_Index13 = getelementptr [100 x i32], [100 x i32]* @v1, i32 0, i32 %10
  %11 = load i32, i32* %j8
  %addtmp = add i32 %11, 1
  %v1_Index14 = getelementptr [100 x i32], [100 x i32]* @v1, i32 0, i32 %addtmp
  %12 = load i32, i32* %v1_Index13
  %13 = load i32, i32* %v1_Index14
  %gtcomparetmp = icmp sgt i32 %12, %13
  br i1 %gtcomparetmp, label %if, label %ifcont

afterloop10:                                      ; preds = %ifcont
  %i24 = load i32, i32* %i4
  %NextVal25 = add i32 %i24, 1
  store i32 %NextVal25, i32* %i4
  %loopcondition26 = icmp slt i32 %NextVal25, %7
  br i1 %loopcondition26, label %loop5, label %afterloop6

if:                                               ; preds = %loop9
  store i32 0, i32* %temp
  %14 = load i32, i32* %j8
  %addtmp15 = add i32 %14, 1
  %v1_Index16 = getelementptr [100 x i32], [100 x i32]* @v1, i32 0, i32 %addtmp15
  %15 = load i32, i32* %v1_Index16
  %16 = load i32, i32* %temp
  store i32 %15, i32* %temp
  %17 = load i32, i32* %j8
  %v1_Index17 = getelementptr [100 x i32], [100 x i32]* @v1, i32 0, i32 %17
  %18 = load i32, i32* %v1_Index17
  %19 = load i32, i32* %j8
  %addtmp18 = add i32 %19, 1
  %v1_Index19 = getelementptr [100 x i32], [100 x i32]* @v1, i32 0, i32 %addtmp18
  %20 = load i32, i32* %v1_Index19
  store i32 %18, i32* %v1_Index19
  %21 = load i32, i32* %temp
  %22 = load i32, i32* %j8
  %v1_Index20 = getelementptr [100 x i32], [100 x i32]* @v1, i32 0, i32 %22
  %23 = load i32, i32* %v1_Index20
  store i32 %21, i32* %v1_Index20
  br label %ifcont

ifcont:                                           ; preds = %if, %loop9
  %j21 = load i32, i32* %j8
  %NextVal22 = add i32 %j21, 1
  store i32 %NextVal22, i32* %j8
  %loopcondition23 = icmp slt i32 %NextVal22, %subtmp12
  br i1 %loopcondition23, label %loop9, label %afterloop10

loop28:                                           ; preds = %loop28, %afterloop6
  %i30 = phi i32 [ 0, %afterloop6 ], [ %NextVal33, %loop28 ]
  %24 = load i32, i32* %n
  %25 = load i32, i32* %i27
  %v1_Index31 = getelementptr [100 x i32], [100 x i32]* @v1, i32 0, i32 %25
  %26 = load i32, i32* %v1_Index31
  %27 = call i32 bitcast (i32 (i8*)* @printf to i32 (i8*, i32)*)(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i32 %26)
  %i32 = load i32, i32* %i27
  %NextVal33 = add i32 %i32, 1
  store i32 %NextVal33, i32* %i27
  %loopcondition34 = icmp slt i32 %NextVal33, %24
  br i1 %loopcondition34, label %loop28, label %afterloop29

afterloop29:                                      ; preds = %loop28
  %28 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*)
