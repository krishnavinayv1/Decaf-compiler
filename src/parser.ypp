%{
#include <bits/stdc++.h>
#include "ast.h"
	using namespace std;
 extern "C" int yylex();
  extern int yyparse();
  extern FILE *yyin;
  extern int line_num;
  extern int errors;
  class prog* start = NULL;
   void yyerror(const char *s);
%}

%union
{
	int number;
	char* stringType;
	class prog *start;
	class fields_c *fields;
	class field_c *field;
	class vars_c *vars;
	class var_c *var;
}
%start prom

%token CALLOUT STRING
%token <stringType> ID
%token <number> INT_LITERAL
%token <stringType> CHAR_LITERAL
%token <stringType> BOOL_LITERAL
%token <stringType> EQQ NQQ EQ
%token <stringType> AND OR NOT
%token <stringType> LT GT LE GE
%token <stringType> ADD SUB
%token <stringType> MUL DIV MOD 
%token OL CL OS CS CB OB
%token <stringType> TYPE VOID
%token CLASS PROGRAM SC COMMA
%token IF FOR BREAK CONTINUE ELSE RETURN
%token <stringType> PLUSONE SUBONE	

%type <start> prom
%type <fields> field_declarations
%type <field> field_declaration
%type <vars> variables;
%type <var> variable;

%left EQQ NQQ
%left AND OR
%left LT GT LE GE
%left ADD SUB
%left MUL DIV MOD
%left NOT


%%

prom : CLASS PROGRAM CB field_declarations method_declarations OB;
	 | CLASS PROGRAM CB OB {$$ = new prog(); start = $$;}
	 | CLASS PROGRAM CB method_declarations OB;
	 | CLASS PROGRAM CB field_declarations  OB { $$ = new prog($4); start = $$;};


field_declarations : field_declaration SC { $$ = new fields_c(); $$->push_back($1);} 
					| field_declarations field_declaration SC { $$->push_back($2); 		printf("field_declarations done\n");};
				   

field_declaration  : TYPE variables { $$ = new field_c($1,$2);};


variables 		   : variable { $$ = new vars_c();$$->push_back($1);} 
					| variables COMMA variable { $$->push_back($3);};


variable           : ID { $$ = new var_c($1);} 
					| ID CS INT_LITERAL OS { $$ = new var_c(string($1),$3); printf("dsff\n");};

method_declarations : method_declaration | method_declarations method_declaration;

method_declaration  : TYPE ID args block | VOID ID args block;

args               : CL OL | CL TYPE ID OL | CL TYPE ID arg OL;

arg                : COMMA TYPE ID | COMMA TYPE ID arg;

block              : CB var_declarations statements OB;
				   | CB statements OB;
				   | CB var_declarations OB;

var_declarations   : var_declaration SC | var_declaration SC var_declarations;

var_declaration    : TYPE location | TYPE location var_names;

var_names          : COMMA location | COMMA location var_names;

statements         : statement | statements statement;

statement: assignment
		 | function_call SC
		 | IF CL expr OL block
		 | IF CL expr OL block ELSE block  
		 | { printf("For loop starting\n");} FOR identifier EQ expr COMMA expr block 
		 | RETURN SC 
		 | RETURN expr SC 
		 | BREAK SC 
		 | CONTINUE SC 
		 | block;

assignment: location EQ {printf("EQUALS \n");} expr SC  
		  | location PLUSONE expr SC 
	      | location SUBONE expr SC;


function_call: ID CL pars OL
			 | CALLOUT CL STRING callout_args OL;

pars         : expr 
			 | pars COMMA expr;

identifier   : ID {printf("location:%s\n ",$1);}

location : ID {printf("location:%s\n ",$1);}
		 | ID CS expr OS;

callout_args: | callout_args COMMA callout_arg;

callout_arg: expr 
		   | STRING;

expr : CL expr OL 
	 |  location 
	 |  literal
	 |  expr SUB expr
	 |  expr OR expr
	 |  expr AND expr 
	 |  expr NQQ expr
	 |  expr EQQ expr
	 |  expr GE expr
	 |  expr LE expr
	 |  expr GT expr
	 |  expr LT expr
	 |  expr MOD expr
	 |  NOT expr
	 |  expr DIV expr 
	 |  expr MUL expr
	 |  expr ADD expr
	 |  SUB {printf("sub expression \n");} expr 
	 ;

literal : INT_LITERAL {printf("int literal \n");} | CHAR_LITERAL | BOOL_LITERAL;



%%

main(int argc, char **argv)
{
	if(argc == 1)
    {
		fprintf(stderr, "Store the input expressions in a file name and give it as a argument\n");
		exit(1);
	}
	printf("Parsing started\n");
	yyin = fopen(argv[1], "r");
	yyparse();

	dfs* df = new dfs();
	start->accept(df);
	printf("THE END\n");
}

void yyerror(const char *s)
{
	fprintf(stderr, "error: %s\n", s);
}